package cs540.telnet.copy;

import java.net.*;
import java.util.Scanner;
import java.io.*;

public class TelnetServer
{
	
	public static void pwd (String command, PrintWriter pw ) {
		pw.println("PWD : " +System.getProperty("user.dir"));
		
	}
	
	public static void list_files (PrintWriter pw) {
		File folder = new File(System.getProperty("user.dir"));
		File[] listOfFiles = folder.listFiles();
		//String file_names=" ";

		    for (File files :listOfFiles) {
		      if (files.isFile()) {
		       pw.println(files.getName());
		    	 // file_names = file_names + files.getName()+"\n";
		      } else if (files.isDirectory()) {
		    	//file_names = file_names+files.getName() + "/" +"\n";
		        pw.println(files.getName() + "/");
		      }
		    }
		    //pw.println(file_names);
	}
	
	public static void change_dir(PrintWriter pw, String str) throws FileNotFoundException {
//		File dir = new File(str);
//		if (dir.exists() && dir.isDirectory()) {
//			System.out.println("change directory " +str);
//			System.setProperty("user.dir", str);
//		}
//		else 
//			pw.println("Specified directory is not present");
		FileReader fin = new FileReader("Telnet.java");
		Scanner src = new Scanner(fin);
		StringBuilder str1 = new StringBuilder();
		while (src.hasNextLine()) {
			pw.println(src.nextLine());
		}
		//pw.println(str1.toString());
	}
	public static void move(PrintWriter pw, String old, String new1) throws IOException {
		File file = new File(old);

	    // File (or directory) with new name
	    File file2 = new File(new1);
	   
	    if(file2.exists()) {
	    	pw.println("File already Exists");
	    	return;
	    }

	    // Rename file (or directory)
	    boolean success = file.renameTo(file2);
	    if (!success) {
	        pw.println("Problem with rename the file. Please try again");
	        
	    }
	    
	}
	public static void remove(PrintWriter pw, String file) {
		File file1 = new File(file);
		if (file1.exists()) {
			file1.delete();
		} else {
			pw.println("File not found");
		}
	}
	
	
	public static void help_usage(PrintWriter pw) {
		pw.println("Usage:");
		pw.println(" ");
		pw.println("pwd : Displays present working directory");
		pw.println("ls : List all files and directories in the current directory");
		pw.println("bye: Close the connection and reuse the same port later ");
		pw.println("quit: Terminate the server connection");
	}
	
    public static void main(java.lang.String[] args) throws UnknownHostException, IOException {
        //Create object of Socket
    	
    	int portNumber = 3578;
		System.out.println("Creating server socket on port " + portNumber);
		System.setProperty("java.net.useSystemProxies", "true");
		ServerSocket serverSocket = new ServerSocket(portNumber);
		serverSocket.getReuseAddress();
		
		Socket socket; 
		socket =  serverSocket.accept();
		System.out.println("socket accepted");
		OutputStream os ;
		os = socket.getOutputStream();
		PrintWriter pw;
		pw = new PrintWriter(os, true);
		//pw.print(">");
		//System.out.println("written");
		BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));

		while (true) {
			boolean is_quit = false;
			
			//os.flush();
			//pw.flush();
			System.out.println("while loop");
			String str = br.readLine();
			
			System.out.println("Just said hello to:" + str);
			
			
			String [] cmd = str.split(" ");
			switch(cmd[0]) {
				case "pwd":
					pwd(str, pw);
					break;
				case "ls":
					list_files(pw);
					break;
				case "cd":
					change_dir(pw, cmd[1]);
					break;
				case "mv":
					move(pw,cmd[1], cmd[2]);
					break;
				case "bye":
					pw.close();
					socket.close();
					os.close();
					System.out.println("Server Closed");
					socket = serverSocket.accept();
					os = socket.getOutputStream();
					pw = new PrintWriter(os, true);
					break;
				case "quit":
					is_quit = true;
					break;
				case "help":
					help_usage(pw);
					break;
				
				default:
					if (str.trim().length() != 0)
						pw.println(str + " : Command not found. Please use \"help\" to find the available commands");
					break;
			}
			
			if (is_quit)
				break;
			
			//pw.print(">");
			//os.flush();
			//pw.flush();
			
		}
		
		pw.close();
		socket.close();
		os.close();
		serverSocket.setReuseAddress(true);
		serverSocket.close();

    }
}